// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var iroha = iroha || {};

/**
 * @enum
 */
iroha.KeyAlgorithm = {
  ed25519: 0
};

/**
 * @constructor
 */
iroha.PublicKey = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {iroha.PublicKey}
 */
iroha.PublicKey.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {iroha.PublicKey=} obj
 * @returns {iroha.PublicKey}
 */
iroha.PublicKey.getRootAsPublicKey = function(bb, obj) {
  return (obj || new iroha.PublicKey).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {iroha.KeyAlgorithm}
 */
iroha.PublicKey.prototype.algorithm = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {iroha.KeyAlgorithm} */ (this.bb.readInt8(this.bb_pos + offset)) : iroha.KeyAlgorithm.ed25519;
};

/**
 * @param {number} index
 * @returns {number}
 */
iroha.PublicKey.prototype.data = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
};

/**
 * @returns {number}
 */
iroha.PublicKey.prototype.dataLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Uint8Array}
 */
iroha.PublicKey.prototype.dataArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
iroha.PublicKey.startPublicKey = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {iroha.KeyAlgorithm} algorithm
 */
iroha.PublicKey.addAlgorithm = function(builder, algorithm) {
  builder.addFieldInt8(0, algorithm, iroha.KeyAlgorithm.ed25519);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} dataOffset
 */
iroha.PublicKey.addData = function(builder, dataOffset) {
  builder.addFieldOffset(1, dataOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
iroha.PublicKey.createDataVector = function(builder, data) {
  builder.startVector(1, data.length, 1);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
iroha.PublicKey.startDataVector = function(builder, numElems) {
  builder.startVector(1, numElems, 1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
iroha.PublicKey.endPublicKey = function(builder) {
  var offset = builder.endObject();
  builder.requiredField(offset, 6); // data
  return offset;
};

// Exports for Node.js and RequireJS
this.iroha = iroha;
