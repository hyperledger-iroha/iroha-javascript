// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var iroha = iroha || {};

/**
 * @constructor
 */
iroha.Account = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {iroha.Account}
 */
iroha.Account.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {iroha.Account=} obj
 * @returns {iroha.Account}
 */
iroha.Account.getRootAsAccount = function(bb, obj) {
  return (obj || new iroha.Account).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {iroha.PublicKey=} obj
 * @returns {iroha.PublicKey}
 */
iroha.Account.prototype.pubKey = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new iroha.PublicKey).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
iroha.Account.prototype.alias = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {number} index
 * @param {iroha.PublicKey=} obj
 * @returns {iroha.PublicKey}
 */
iroha.Account.prototype.signatories = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new iroha.PublicKey).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
iroha.Account.prototype.signatoriesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
iroha.Account.prototype.useKeys = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readUint16(this.bb_pos + offset) : 1;
};

/**
 * @param {flatbuffers.Builder} builder
 */
iroha.Account.startAccount = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} pubKeyOffset
 */
iroha.Account.addPubKey = function(builder, pubKeyOffset) {
  builder.addFieldOffset(0, pubKeyOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} aliasOffset
 */
iroha.Account.addAlias = function(builder, aliasOffset) {
  builder.addFieldOffset(1, aliasOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} signatoriesOffset
 */
iroha.Account.addSignatories = function(builder, signatoriesOffset) {
  builder.addFieldOffset(2, signatoriesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
iroha.Account.createSignatoriesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
iroha.Account.startSignatoriesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} useKeys
 */
iroha.Account.addUseKeys = function(builder, useKeys) {
  builder.addFieldInt16(3, useKeys, 1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
iroha.Account.endAccount = function(builder) {
  var offset = builder.endObject();
  builder.requiredField(offset, 4); // pubKey
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
iroha.Account.finishAccountBuffer = function(builder, offset) {
  builder.finish(offset);
};

/**
 * @constructor
 */
iroha.Message = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {iroha.Message}
 */
iroha.Message.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {iroha.Message=} obj
 * @returns {iroha.Message}
 */
iroha.Message.getRootAsMessage = function(bb, obj) {
  return (obj || new iroha.Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {iroha.PublicKey=} obj
 * @returns {iroha.PublicKey}
 */
iroha.Message.prototype.accPubKey = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new iroha.PublicKey).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {number} index
 * @param {iroha.KeyValueObject=} obj
 * @returns {iroha.KeyValueObject}
 */
iroha.Message.prototype.data = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new iroha.KeyValueObject).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
iroha.Message.prototype.dataLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
iroha.Message.startMessage = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} accPubKeyOffset
 */
iroha.Message.addAccPubKey = function(builder, accPubKeyOffset) {
  builder.addFieldOffset(0, accPubKeyOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} dataOffset
 */
iroha.Message.addData = function(builder, dataOffset) {
  builder.addFieldOffset(1, dataOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
iroha.Message.createDataVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
iroha.Message.startDataVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
iroha.Message.endMessage = function(builder) {
  var offset = builder.endObject();
  builder.requiredField(offset, 4); // accPubKey
  return offset;
};

// Exports for Node.js and RequireJS
this.iroha = iroha;
