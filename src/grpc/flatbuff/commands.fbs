include "asset.fbs";
include "account.fbs";
include "key.fbs";
include "primitives.fbs";

namespace iroha;

// we union only those objects.
// they share the same commands
union Object { Peer, Account, Chaincode }

table CmdAdd {
    object: Object (required);
}

table CmdRemove {
    object: Object (required);
}



// users are able to store custom data in their accounts
table CmdStore {
    accPubKey: PublicKey        (required);
    data:      [KeyValueObject] (required);
}


table CmdTransfer {
    currency: Asset     (required);
    sender:   PublicKey (required);
    receiver: PublicKey (required);
}

//////////////////////////////////////////
/// Commands for Asset

// logically means asset summation
table CmdAddAsset {
    accPubKey: PublicKey (required);
    asset:     [AnyAsset]   (required);
}

// logically means asset negation
table CmdRemoveAsset {
    accPubKey: PublicKey (required);
    asset:     [AnyAsset]   (required);
}

// needed to implement correct permission model:
// user may have permission to add asset, but not to create and vice versa.
table CmdCreateAsset {
    asset_name:  string (required);
    domain_name: string (required);
    ledger_name: string (required);

    description: string;
}
//////////////////////////////////////////


//////////////////////////////////////////
/// Commands for Chaincode
table CmdExecute {
  code_name:   string  (required);
  domain_name: string  (required);
  ledger_name: string  (required);
}


// consider chaincode storage as key-value map
table CmdSetChaincode {
    chaincode: Chaincode (required);
}
//////////////////////////////////////////


//////////////////////////////////////////
/// Commands for Peer

// set new peer trust (with specific value)
table CmdSetPeerTrust {
    peerPubKey: PublicKey (required);
    trust:      double;
}

// change current trust to some delta
// example: delta=-5, trust=10 -> newTrust = 10-5 = 5
table CmdChangePeerTrust {
    peerPubKey: PublicKey (required);
    delta:      double;
}

table CmdSetPeerActive {
    peerPubKey: PublicKey (required);
    active:     bool;
}
//////////////////////////////////////////


//////////////////////////////////////////
/// Commands for Account
table CmdAddSignatory {
    account:   PublicKey   (required);
    signatory: [PublicKey] (required);
}

table CmdSetAccountsUseKeys {
    accounts: [PublicKey] (required);
    useKeys:  ushort;
}
//////////////////////////////////////////


union Command {
    CmdAddAsset,
    CmdRemoveAsset,
    CmdCreateAsset,
    CmdTransfer,

    CmdAdd,
    CmdRemove,
    CmdExecute,
    CmdStore,

    CmdSetPeerTrust,
    CmdChangePeerTrust,
    CmdSetPeerActive,
    CmdSetChaincode,
    CmdSetAccountsUseKeys
}
